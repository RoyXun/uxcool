@import '../../style/themes/default';
@import '../../style/mixins/index';

$tag-prefix-cls: #{$ux-prefix}-tag;

.#{$tag-prefix-cls} {
  @include reset-component;
  display: inline-block;
  line-height: 20px;
  height: 22px;
  padding: 0 7px;
  border-radius: $border-radius-base;
  border: $border-width-base $border-style-base $border-color-base;
  background: $tag-default-bg;
  font-size: $tag-font-size;
  transition: all 0.3s $ease-out;
  opacity: 1;
  margin-right: 8px;
  cursor: pointer;
  white-space: nowrap;

  &:hover {
    opacity: 0.85;
  }

  &,
  a,
  a:hover {
    color: $tag-default-color;
  }

  > a:first-child:last-child {
    display: inline-block;
    margin: 0 -8px;
    padding: 0 8px;
  }

  .#{$iconfont-css-prefix}-cross {
    @include iconfont-size-under-12px(10px);
    cursor: pointer;
    margin-left: 3px;
    transition: all 0.3s;
    color: $text-color-secondary;
    font-weight: bold;

    &:hover {
      color: $heading-color;
    }
  }

  &-has-color {
    border-color: transparent;
    &,
    a,
    a:hover,
    .#{$iconfont-css-prefix}-cross,
    .#{$iconfont-css-prefix}-cross:hover {
      color: #fff;
    }
  }

  &-checkable {
    background-color: transparent;
    border-color: transparent;
    &:not(&-checked):hover {
      color: $primary-color;
    }
    &:active,
    &-checked {
      color: #fff;
    }
    &-checked {
      background-color: $primary-6;
    }
    &:active {
      background-color: $primary-7;
    }
  }

  &-close {
    width: 0 !important;
    padding: 0;
    margin: 0;
  }

  &-zoom-enter,
  &-zoom-appear {
    animation: antFadeIn 0.2s $ease-in-out-circ;
    animation-fill-mode: both;
  }

  &-zoom-leave {
    animation: antZoomOut 0.3s $ease-in-out-circ;
    animation-fill-mode: both;
  }

  $colors: (
    pink: #eb2f96,
    magenta: #eb2f96,
    red: #f5222d,
    volcano: #fa541c,
    orange: #fa8c16,
    yellow: #fadb14,
    gold: #faad14,
    cyan: #13c2c2,
    lime: #a0d911,
    green: #52c41a,
    blue: #108ee9,
    geekblue: #2f54eb,
    purple: #722ed1
  );

  // // mixin to iterate over colors and create CSS class for each one
  // @mixin make-color-classes($i: length($colors)) when ($i > 0) {
  //   @include make-color-classes($i - 1);
  //   $color: extract($colors, $i);
  //   $lightColor: "#{$color}-1";
  //   $lightBorderColor: "#{$color}-3";
  //   $darkColor: "#{$color}-6";
  //   &-#{$color} {
  //     color: $$darkColor;
  //     background: $$lightColor;
  //     border-color: $$lightBorderColor;
  //   }
  //   &-#{$color}-inverse {
  //     background: $$darkColor;
  //     border-color: $$darkColor;
  //     color: #fff;
  //   }
  // }

  // .make-color-classes();

  @mixin make-color-classes($colors) {
    @each $key, $color in $colors {
      @for $i from 1 through 10 {
        $p: $i * 10;
        $c: tint($color, $p);
        @debug '#{$key}--#{$color} -- #{$c}--#{shade($color, $i * 100 / 100%)}-#{$p} ';
      }
      &-#{$color} {
        color: $color;
      }
    }
  }

  @include make-color-classes($colors);
}
